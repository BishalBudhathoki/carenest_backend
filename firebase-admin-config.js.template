const admin = require('firebase-admin');
const { environmentConfig } = require('./config/environment');

// Load environment variables
require('dotenv').config();

// Environment-based logging configuration
const isProduction = environmentConfig.isProductionEnvironment();
const shouldLogSensitive = environmentConfig.shouldLogSensitiveData();

// Safe logging function that respects environment
function safeLog(message, data = null, level = 'info') {
  if (level === 'debug' && isProduction) {
    return; // Skip debug logs in production
  }
  
  if (data && !shouldLogSensitive) {
    console.log(message, '[HIDDEN IN PRODUCTION]');
  } else {
    console.log(message, data || '');
  }
}

// Basic configuration info (safe for all environments)
safeLog('Firebase config - Current directory:', process.cwd());
safeLog(`Firebase config - Environment: ${environmentConfig.getEnvironment()}`);

// Debug information for troubleshooting (development only)
if (shouldLogSensitive) {
  safeLog('DEBUG: process.env.FIREBASE_PRIVATE_KEY (length):', process.env.FIREBASE_PRIVATE_KEY ? process.env.FIREBASE_PRIVATE_KEY.length : 0, 'debug');
  safeLog('DEBUG: process.env.FIREBASE_PRIVATE_KEY (first 50 chars):', process.env.FIREBASE_PRIVATE_KEY ? process.env.FIREBASE_PRIVATE_KEY.substring(0, 50) : 'undefined', 'debug');
  safeLog('DEBUG: process.env.FIREBASE_PRIVATE_KEY (last 50 chars):', process.env.FIREBASE_PRIVATE_KEY ? process.env.FIREBASE_PRIVATE_KEY.slice(-50) : 'undefined', 'debug');
} else {
  safeLog('Firebase private key configuration: [CONFIGURED]');
}

// Check if environment variables are set
const envCheck = {
  FIREBASE_PROJECT_ID: process.env.FIREBASE_PROJECT_ID,
  FIREBASE_CLIENT_EMAIL: process.env.FIREBASE_CLIENT_EMAIL,
  HAS_PRIVATE_KEY: !!process.env.FIREBASE_PRIVATE_KEY,
  PRIVATE_KEY_LENGTH: process.env.FIREBASE_PRIVATE_KEY ? process.env.FIREBASE_PRIVATE_KEY.length : 0
};

safeLog('Environment Variables Check:', envCheck);

// Initialize Firebase Admin SDK using environment variables
const serviceAccount = {
  "type": "service_account",
  "project_id": process.env.FIREBASE_PROJECT_ID,
  "private_key_id": process.env.FIREBASE_PRIVATE_KEY_ID,
  "private_key": process.env.FIREBASE_PRIVATE_KEY ? process.env.FIREBASE_PRIVATE_KEY.replace(/\\n/g, '\n') : '',
  "client_email": process.env.FIREBASE_CLIENT_EMAIL,
  "client_id": process.env.FIREBASE_CLIENT_ID,
  "auth_uri": process.env.FIREBASE_AUTH_URI || "https://accounts.google.com/o/oauth2/auth",
  "token_uri": process.env.FIREBASE_TOKEN_URI || "https://oauth2.googleapis.com/token",
  "auth_provider_x509_cert_url": process.env.FIREBASE_AUTH_CERT_URL || "https://www.googleapis.com/oauth2/v1/certs",
  "client_x509_cert_url": process.env.FIREBASE_CLIENT_CERT_URL,
  "universe_domain": process.env.FIREBASE_UNIVERSE_DOMAIN || "googleapis.com"
};

// Debug service account info (development only)
if (shouldLogSensitive) {
  safeLog('DEBUG: serviceAccount.private_key (length after replace):', serviceAccount.private_key ? serviceAccount.private_key.length : 0, 'debug');
  safeLog('DEBUG: serviceAccount.private_key (first 50 chars after replace):', serviceAccount.private_key ? serviceAccount.private_key.substring(0, 50) : 'undefined', 'debug');
  safeLog('DEBUG: serviceAccount.private_key (last 50 chars after replace):', serviceAccount.private_key ? serviceAccount.private_key.slice(-50) : 'undefined', 'debug');
}

safeLog('Service Account Config:', {
  ...serviceAccount,
  private_key: '[REDACTED]'
});

safeLog('Initializing Firebase Admin SDK...');

// Initialize the Firebase Admin SDK
try {
  admin.initializeApp({
    credential: admin.credential.cert(serviceAccount)
  });
  safeLog('Firebase Admin SDK initialized successfully');
} catch (error) {
  console.error('Error initializing Firebase Admin SDK:', error.message);
  throw error; // Re-throw to fail the application startup if Firebase is critical
}

// Set up messaging service
safeLog('Setting up FCM messaging service...');
const messaging = admin.messaging();
safeLog('FCM messaging service initialized successfully');

// Export both admin and messaging for use in other modules
module.exports = { admin, messaging };